<style>
    .bills__info__card {
        display: flex;
        flex-direction: column;
        justify-content: center;
        gap: var(--spacing-md);
    }

    .active-bills-info small {
        color: var(--txt-alt2);
    }

    .active-bills-info h4 {
        margin-bottom: var(--spacing-xs);
        font-size: var(--font-xl);
    }

    .bills-icon {
        width: 50px;
        height: 50px;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        position: relative;

    }

    .active-bills {
        background: var(--success-transparent-300);
        border: 1px solid var(--success-transparent-300);
    }

    .active-bills::after {
        content: 'âœ…';
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
    }

    .total-bills {
        background: var(--warning-transparent-300);
        border: 1px solid var(--warning-transparent-300);
    }

    .total-bills::after {
        content: 'ðŸ’°';
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
    }

    .expensive-bill {
        background: var(--danger-transparent-300);
        border: 1px solid var(--danger-transparent-300);
    }

    .expensive-bill::after {
        content: 'ðŸ”¥';
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
    }

    .hidden {
        display: none;
    }

    /* hide input when not focus */
    /* input.controlled-input:not(:focus) {
    opacity: 0;
    border: none;
    pointer-events: none;
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    z-index: -1;

  }

  input.controlled-input:focus {
    opacity: 1;
    pointer-events: all;
    position: relative;

  } */

    /*  hide label when input is :focus */

    /* input.controlled-input:focus+label {
    opacity: 0;
    pointer-events: none;
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    z-index: -1;
  } */
    form.controlled-input-form {
        position: relative;
    }

    /* input.controlled-input:not(:focus-within)+button.controlled-input-btn {
    display: none;
  }

  input.controlled-input:focus-within+button.controlled-input-btn {
    position: absolute;
    top: -8px;
    padding: 4px;
    font-size: 14px;
    width: fit-content;
    right: -7px;
  } */

    input.controlled-input {
        position: relative;
    }

    span.controlled-input-unsaved {
        position: absolute;
        top: 0;
        right: 0;
        transform: translate(0, -50%);
        z-index: 1;
        height: 12px;
        width: 12px;
        border-radius: 50%;
        background: var(--txt-alt3);
        border: 1px solid var(--txt-alt3);
    }

    button.controlled-input-btn {
        position: absolute;
        top: -8px;
        padding: 4px;
        font-size: 14px;
        width: fit-content;
        right: -7px;
    }

    button.controlled-input-btn.hidden {
        display: none;
    }

    th,
    td {
        position: relative;
    }

    input[data-input="controlled"],
    [data-input="controlled"] {
        border: none;
        background: none;
        padding: 0;
        margin: 0;
        transition: all 0.125s ease-in-out;

    }

    input[data-input="controlled"]:focus,
    [data-input="controlled"]:focus {
        border: var(--primary) 1px solid;
        background: var(--surface-alt2);
        padding: var(--spacing-sm);
    }

    .menu {
        background-color: rgba(31, 32, 33, 0.85);
        backdrop-filter: blur(10px);
        border: var(--border-color) 1px solid;
    }

    .menu-item {
        padding: var(--spacing-sm);
        border-radius: var(--border-radius-sm);
        cursor: pointer;
    }

    .menu-item:hover {
        background: var(--surface-alt2);
    }
</style>
<div class="bills wrapper p-l">
    <div class="bills__header">
        <div class="breadcrumbs mb-l">
            <a
                class="mb-l"
                href="/dashboard"
            >Dashboard</a> / <span class="bold">Bills</span>
        </div>
        <h1 class="font-xxl mb-l">Bills</h1>
    </div>
    <div class="bills__info__cards container-grid-items">
        <div class="bills__info__card paper-bordered">
            <div class="bills-icon active-bills"></div>
            <div class="active-bills-info">
                <h4>
                    <%= bills.length %>
                </h4>
                <small class="">Bills Active</small>
            </div>
        </div>
        <div class="bills__info__card paper-bordered">
            <div class="bills-icon total-bills"></div>
            <div class="active-bills-info">
                <h4>
                    <!-- display the total amount of all bills -->
                    $<%= bills.reduce((total, bill)=> total + bill.billAmount, 0) %>
                </h4>
                <small>Total Amount</small>
            </div>
        </div>
        <div class="bills__info__card paper-bordered">
            <div class="bills-icon expensive-bill"></div>
            <div class="active-bills-info">
                <h4>
                    <!-- display the largest bill -->
                    $<%= bills.reduce((max, bill)=> bill.billAmount > max ? bill.billAmount : max, 0) %>
                </h4>
                <small>Most Expensive</small>
            </div>
        </div>
    </div>
    <div class="bills__content">
        <div class="bills__content__header <%= bills.length === 0 && 'hidden' %>">
            <div class="bills__content__header__actions flex gap-l pb-s my-l border-bottom">
                <a
                    href="/bills"
                    class="btn btn-primary"
                >All</a>
                <a
                    href="/bills?status=unpaid"
                    class="btn btn-primary"
                >Unpaid</a>
                <a
                    href="/bills?status=paid"
                    class="btn btn-primary"
                >Paid</a>
            </div>
        </div>
        <div class="bills__content__body">
            <div class="bills__content__body__items">
                <table
                    id="dtBasicExample"
                    cellspacing="0"
                    width="100%"
                    class="<%= bills.length === 0 && 'hidden' %> form-table"
                >
                    <thead>
                        <tr>
                            <th class="th-sm">Id</th>
                            <th
                                class="th-sm"
                                data-sort="false"
                                data-sort-type="string"
                                data-sort-target="name"
                            >
                                Name
                            </th>
                            <th
                                class="th-sm"
                                data-sort="false"
                                data-sort-type="money"
                                data-sort-target="amount"
                            >
                                Amount
                            </th>
                            <th
                                class="th-sm"
                                data-sort="false"
                                data-sort-type="date"
                                data-sort-target="due"
                            >
                                Due
                            </th>
                            <th
                                class="th-sm"
                                data-sort="false"
                                data-sort-type="string"
                                data-sort-target="status"
                            >
                                Status
                            </th>
                            <th
                                class="th-sm"
                                data-sort="false"
                                data-sort-type="string"
                                data-sort-target="category"
                            >
                                Category
                            </th>
                            <th>
                                Actions
                            </th>
                        </tr>
                    </thead>
                    <tbody>
                        <% bills.forEach((bill, i)=> { %>
                        <tr>
                            <td>
                                <%= i + 1 %>
                            </td>
                            <td data-sortid="name">
                                <input
                                    data-input="controlled"
                                    type="text"
                                    name="billName"
                                    data-id="<%= bill._id %>"
                                    class="controlled-input"
                                    value="<%= bill.billName %>"
                                    data-originalvalue="<%= bill.billName %>"
                                >
                                <button class="controlled-input-btn hidden">
                                    save
                                </button>
                            </td>
                            <td
                                data-sortid="amount"
                                class="flex align-center gap-xs"
                            >
                                <span>$</span>
                                <input
                                    data-input="controlled"
                                    type="number"
                                    name="billAmount"
                                    data-id="<%= bill._id %>"
                                    class="controlled-input"
                                    value="<%= bill.billAmount %>"
                                    data-originalvalue="<%= bill.billAmount %>"
                                >
                                <button class="controlled-input-btn hidden">
                                    save
                                </button>
                            </td>
                            <td data-sortid="due">
                                <input
                                    data-input="controlled"
                                    type="date"
                                    name="billDueDate"
                                    data-id="<%= bill._id %>"
                                    class="controlled-input"
                                    value="<%= bill.billDueDate.toISOString().split('T')[0] %>"
                                    data-originalvalue="<%= bill.billDueDate.toISOString().split('T')[0] %>"
                                >
                                <button class="controlled-input-btn hidden">
                                    save
                                </button>
                            </td>
                            <td data-sortid="status">
                                <select
                                    data-input="controlled"
                                    name="billStatus"
                                    data-id="<%= bill._id %>"
                                    class="controlled-input"
                                    data-originalvalue="<%= bill.billStatus %>"
                                >
                                    <option
                                        value="unpaid"
                                        <%= bill.billStatus.toLowerCase() === 'unpaid' && 'selected' %>
                                    >
                                        Unpaid
                                    </option>
                                    <option
                                        value="paid"
                                        <%= bill.billStatus.toLowerCase() === 'paid' && 'selected' %>
                                    >
                                        Paid
                                    </option>
                                </select>
                                <button class="controlled-input-btn hidden">
                                    save
                                </button>
                            </td>
                            <td data-sortid="category">

                                <select
                                    data-input="controlled"
                                    name="billCategory"
                                    data-id="<%= bill._id %>"
                                    class="controlled-input"
                                    data-originalvalue="<%= bill.billCategory %>"
                                >

                                    <option
                                        value="rent"
                                        <%= bill.billCategory.toLowerCase() === 'rent' && 'selected' %>
                                    >
                                        Rent
                                    </option>
                                    <option
                                        value="utilities"
                                        <%= bill.billCategory.toLowerCase() === 'utilities' && 'selected' %>
                                    >
                                        Utilities
                                    </option>
                                    <option
                                        value="food"
                                        <%= bill.billCategory.toLowerCase() === 'food' && 'selected' %>
                                    >
                                        Food
                                    </option>
                                    <option
                                        value="transportation"
                                        <%= bill.billCategory.toLowerCase() === 'transportation' && 'selected' %>
                                    >
                                        Transportation
                                    </option>
                                    <option
                                        value="entertainment"
                                        <%= bill.billCategory.toLowerCase() === 'entertainment' && 'selected' %>
                                    >
                                        Entertainment
                                    </option>
                                    <option
                                        value="other"
                                        <%= bill.billCategory.toLowerCase() === 'other' && 'selected' %>
                                    >
                                        Other
                                    </option>
                                </select>
                                <button class="controlled-input-btn hidden">
                                    save
                                </button>
                            </td>
                            <td class="">
                                <div>
                                    <button
                                        class="menu-btn"
                                        data-billid="<%= bill._id %>"
                                    >
                                        <span><i class="nc nc-more-horizontal"></i></span>
                                    </button>
                                </div>
                            </td>
                        </tr>
                        <% }) %>
                    </tbody>
                </table>
                <% if (bills.length===0) { %>
                <div class="bills__content__body__item paper">
                    <h4 class="font-s">No bills found</h4>
                </div>
                <% } %>
            </div>
        </div>
        <% if (showAlert) { %>
        <div
            class="<%= isAlertError ? 'bg-warning' : 'bg-success' %> snackbar active"
            data-snackbar="billsAlert"
        >
            <div class="snackbar__content">
                <div class="snackbar__content__icon">
                    <i class="nc nc-alert-square"></i>
                </div>
                <div class="snackbar__content__text">
                    <h4 class="font-s">
                        <%= alertMsg || "" %>
                    </h4>
                </div>
                <div
                    class="snackbar__content__action"
                    data-toggle="snackbar"
                    role="snackbar-toggle"
                    data-target="billsAlert"
                >
                    <i class="nc nc-close"></i>
                </div>
            </div>
        </div>
        <% } %>
        <div
            class="add-bill circle-xl fixed bottom-lg right-md pointer flex align-center justify-center bg-primary shadow-xxxl txt-white"
            data-toggler="true"
            data-toggler-for="newBill"
            id="newBillBtn"
        >
            <i class="nc nc-plus"></i>
        </div>
    </div>
</div>

<div
    class="modal"
    aria-hidden="true"
    data-toggle-target="newBill"
    data-component="modal"
>
    <div class="modal__content">
        <div class="modal__content__header flex align-center justify-between">
            <h3 class="font-m">Add New Bill</h3>
            <div class="modal__content__header__actions">
                <a
                    data-toggler="true"
                    data-toggler-for="newBill"
                >
                    <img
                        src="static/images/close.svg"
                        alt="x for closing"
                        height="20"
                        width="20"
                    >
                </a>
            </div>
        </div>
        <div class="modal__content__body">
            <form
                action="/bills/new"
                method="POST"
                class="mt-l"
            >
                <div class="input-wrapper flex-v gap-s">
                    <label
                        for="billName"
                        class="label-required"
                    >
                        Name
                    </label>
                    <input
                        type="text"
                        name="billName"
                        id="billName"
                        required
                        autofocus
                    />
                </div>
                <div class="input-wrapper flex-v gap-s mt-s">
                    <label
                        for="billAmount"
                        class="label-required"
                    >Amount</label>
                    <input
                        type="number"
                        name="billAmount"
                        id="billAmount"
                        required
                        min="0"
                    />
                </div>

                <div class="input-wrapper flex-v gap-s mt-s">
                    <label
                        for="billDueDate"
                        class="label-required"
                    >DueDate</label>
                    <input
                        type="date"
                        name="billDueDate"
                        id="billDueDate"
                        required
                    />
                </div>
                <div class="input-wrapper flex-v gap-s mt-s">
                    <label
                        for="billFrequency"
                        class="label-required"
                    >Frequency</label>
                    <input
                        type="number"
                        name="billFrequency"
                        id="billFrequency"
                        required
                        min="1"
                    />
                </div>
                <div class="input-wrapper flex-v gap-s mt-m">
                    <label
                        for="category"
                        class="label-required"
                    >Category</label>
                    <select
                        name="billCategory"
                        id="billCategory"
                        required
                    >
                        <option value="">--Select a Category--</option>
                        <option value="food">Food</option>
                        <option value="entertainment">Entertainment</option>
                        <option value="utilities">Utilities</option>
                        <option value="transportation">
                            Transportation
                        </option>
                        <option value="other">Other</option>
                    </select>
                </div>
                <div class="input-wrapper flex align-center gap-s mt-m">
                    <label for="isAutoPay">Autopay</label>
                    <input
                        type="checkbox"
                        name="isAutoPay"
                        id="isAutoPay"
                    />
                </div>

                <button class="mt-m">Add bill</button>
            </form>
        </div>
    </div>
</div>
<script src="static/js/popover.js"></script>
<script src="static/js/snackbar.js"></script>
<script src="static/js/menu.js"></script>
<script src="static/js/menu2.js"></script>
<script>
    initPopover();
    initSnackbar();
</script>
<script>
    const menuBtns = document.querySelectorAll('.menu-btn');
    console.log(menuBtns)
    menuBtns.forEach((btn, index) => {
        btn.setAttribute('data-menu', `menu-${index}`);
        new Menu({
            toggler: btn,
            width: 300,
            items: [{
                    text: 'Edit',
                    icon: 'nc nc-edit',
                    callback: () => {
                        console.log('edit');
                    },
                },
                {
                    text: 'Delete',
                    icon: 'nc nc-trash',
                    callback: async () => {
                        await deleteBill(btn.dataset.billid);
                    },
                },
            ],
        })
    })
</script>

<script>
    const controlledInputSubmitBtns = document.querySelectorAll('.controlled-input-btn');
    const controlledInputs = document.querySelectorAll('.controlled-input');

    controlledInputs.forEach((input) => {
        /*
            Input states: 

            edited: show save button until input loses focus
            unfocused and edited: show unsaved icon until input is edited again
            editing: show save button until input is saved or input loses focus
            normal: remove save button and unsaved icon
        */

        input.addEventListener('input', (e) => {

            // if input is edited, show save button
            const inputId = e.target.id;
            const submitBtn = e.target.parentNode.querySelector('.controlled-input-btn');

            if (e.target.value !== e.target.dataset.originalvalue) {
                e.target.dataset.edited = 'true';
                e.target.dataset.editing = 'true';
                e.target.classList.add('edited');
                e.target.classList.add('editing');
                submitBtn.classList.remove('hidden');
            } else {
                e.target.dataset.edited = 'false';
                e.target.dataset.editing = 'false';
                e.target.classList.remove('edited');
                e.target.classList.remove('editing');
                submitBtn.classList.add('hidden');
            }

        });

        input.addEventListener('focus', (e) => {
            const inputId = e.target.id;
            const unsavedIcon = document.getElementById(`${inputId}__unsaved`);

            if (e.target.dataset.edited === 'true') {
                e.target.dataset.editing = 'true';
                e.target.classList.add('editing');
                // unsavedIcon.classList.add('hidden');
            }
        });

        input.addEventListener('blur', (e) => {
            const inputId = e.target.id;
            const unsavedIcon = document.getElementById(`${inputId}__unsaved`);

            if (e.target.dataset.editing === 'true') {
                e.target.dataset.editing = 'false';
                e.target.classList.remove('editing');
            }
            if (e.target.dataset.edited === 'true') {
                e.target.dataset.editing = 'false';
                e.target.classList.remove('editing');

                // show unsaved icon
                // unsavedIcon.classList.remove('hidden');
            }
        });
    });

    const updateBill = async (update) => {
        console.log("called updateBill")

        try {
            const response = await fetch('/api/v1/bills/edit', {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(update)
            });

            const responseData = await response.json();
            console.log(responseData);
            return responseData;

        } catch (error) {
            console.log(error);
            showSnackbar({
                message: 'Bill update failed',
                type: "error",
                duration: 3000,
            });
        }
    }

    const deleteBill = async (id) => {
        console.log("called deleteBill")

        console.log(id)

        try {
            const response = await fetch(`api/v1/bills/delete/${id}`, {
                method: 'POST',
            });

            const responseData = await response.json();
            console.log("response data", responseData);

            if (responseData.status === 200) {
                showSnackbar({
                    message: 'Bill deleted',
                    type: "success",
                    duration: 500,
                    callback: () => {
                        window.location.reload();
                    }
                });
                // window.location.reload();
            } else if (responseData.status === 401) {
                showSnackbar({
                    message: 'You are not authorized to delete this bill, please login',
                    type: "error",
                    duration: 500,
                    callback: () => {
                        window.location.href = '/login';
                    }
                });
            } else {
                showSnackbar({
                    message: 'Bill delete failed',
                    type: "error",
                    duration: 500,
                });
            }

        } catch (error) {
            console.log(error);
            showSnackbar({
                message: 'Bill delete failed',
                type: "error",
                duration: 3000,
            });
        }
    }
</script>

<script>
    // set state of obj to be sent to server
    class BillUpdate {
        constructor(id, property, value) {
            this.id = id;
            this.property = property;
            this.value = value;
        }

        getBillUpdate() {
            return {
                id: this.id,
                property: this.property,
                value: this.value,
            }
        }

        setBillUpdate(id, property, value) {
            this.id = id;
            this.property = property;
            this.value = value;
        }

        setBillUpdateId(id) {
            this.id = id;
        }

        setBillUpdateProperty(property) {
            this.property = property;
        }

        setBillUpdateValue(value) {
            this.value = value;
        }

        getBillUpdateId() {
            return this.id;
        }

        getBillUpdateProperty() {
            return this.property;
        }

        getBillUpdateValue() {
            return this.value;
        }
    }

    // set state of obj to be sent to server on input change

    const billUpdate = new BillUpdate();

    const cInputs = document.querySelectorAll('.controlled-input');

    cInputs.forEach((input) => {
        input.addEventListener('input', (e) => {
            billUpdate.setBillUpdateId(e.target.dataset.id);
            billUpdate.setBillUpdateProperty(e.target.name);
            billUpdate.setBillUpdateValue(e.target.value);
        });
    });

    const cInputBtns = document.querySelectorAll('.controlled-input-btn');

    cInputBtns.forEach((btn) => {
        btn.addEventListener('click', async (e) => {
            const bill = billUpdate.getBillUpdate();
            console.log(bill);

            const result = await updateBill(bill);

            if (result.status === 200) {
                showSnackbar({
                    message: 'Bill updated successfully',
                    type: "success",
                    duration: 3000,
                });

                btn.classList.add('hidden');

                const input = btn.parentNode.querySelector('.controlled-input');
                input.value = billUpdate.getBillUpdateValue();
                input.dataset.originalvalue = input.value;
                input.dataset.edited = 'false';
                input.dataset.editing = 'false';
                input.classList.remove('edited');
                input.classList.remove('editing');

            } else {
                showSnackbar({
                    message: 'Bill update failed',
                    type: "error",
                    duration: 3000,
                });
            }
        });
    });
</script>